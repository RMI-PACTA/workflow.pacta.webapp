---
name: Test docker image

on:
  workflow_call:
    inputs:
      full-image-name:
        required: true
        type: string
      config-name:
        required: true
        type: string
      results-url:
        description: azure blob store path for results
        required: false
        default: "https://pactadatadev.blob.core.windows.net/ghactions-workflow-pacta-webapp-results"
        type: string
      reports-url:
        description: azure blob store path for results
        required: false
        default: "https://pactadatadev.blob.core.windows.net/ghactions-workflow-pacta-webapp-results-reports"
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:

      - name: Checkout workflow
        uses: actions/checkout@v4

      - name: Prepare environment
        id: prepare
        env:
          CONFIG_NAME: ${{ inputs.config-name }}
          GITHUB_REF_NAME: ${{ github.ref_name}}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          config_file="tests/config/$CONFIG_NAME.json"
          echo "config_file: $config_file"

          HOLDINGS_DATE="$(jq -rc '.holdingsDate' $config_file)"
          echo "holdings-date=$HOLDINGS_DATE"
          echo "holdings-date=$HOLDINGS_DATE" >> "$GITHUB_OUTPUT"

          PACTA_DATA_URL="$(jq -rc '.pactaDataURL' $config_file)"
          echo "pacta-data-url=$PACTA_DATA_URL"
          echo "pacta-data-url=$PACTA_DATA_URL" >> "$GITHUB_OUTPUT"

          BENCHMARKS_URL="$(jq -rc '.benchmarksURL' $config_file)"
          echo "benchmarks-url=$BENCHMARKS_URL"
          echo "benchmarks-url=$BENCHMARKS_URL" >> "$GITHUB_OUTPUT"

          RESULTS_URL="$(jq -rc '.resultsURL' $config_file)"
          echo "results-url=$RESULTS_URL"
          echo "results-url=$RESULTS_URL" >> "$GITHUB_OUTPUT"

          # includes handling for null/missing keys
          PARAMETERS="$(jq -rc '.parameters | select( . != null )' $config_file)"
          echo "parameters=$PARAMETERS"
          echo "parameters=$PARAMETERS" >> "$GITHUB_OUTPUT"

          TEST_DIR="$WORKSPACE/$GITHUB_REF_NAME/$GITHUB_RUN_NUMBER/$GITHUB_RUN_ATTEMPT/$CONFIG_NAME"
          mkdir -p $TEST_DIR
          echo "test-dir=$TEST_DIR"
          echo "test-dir=$TEST_DIR" >> "$GITHUB_OUTPUT"

          REPORT_OUTPUT_DIR="$TEST_DIR/report_output_dir"
          mkdir -p "$REPORT_OUTPUT_DIR"
          chmod -R 777 "$REPORT_OUTPUT_DIR"
          echo "report-output-dir=$REPORT_OUTPUT_DIR"
          echo "report-output-dir=$REPORT_OUTPUT_DIR" >> "$GITHUB_OUTPUT"

          SUMMARY_OUTPUT_DIR="$TEST_DIR/summary_output_dir"
          mkdir -p "$SUMMARY_OUTPUT_DIR"
          chmod -R 777 "$SUMMARY_OUTPUT_DIR"
          echo "summary-output-dir=$SUMMARY_OUTPUT_DIR"
          echo "summary-output-dir=$SUMMARY_OUTPUT_DIR" >> "$GITHUB_OUTPUT"

          REAL_ESTATE_DIR="$TEST_DIR/real_estate_dir"
          mkdir -p "$REAL_ESTATE_DIR"
          chmod -R 777 "$REAL_ESTATE_DIR"
          echo "real-estate-dir=$REAL_ESTATE_DIR"
          echo "real-estate-dir=$REAL_ESTATE_DIR" >> "$GITHUB_OUTPUT"

          SCORE_CARD_DIR="$TEST_DIR/score_card_dir"
          mkdir -p "$SCORE_CARD_DIR"
          chmod -R 777 "$SCORE_CARD_DIR"
          echo "score-card-dir=$SCORE_CARD_DIR"
          echo "score-card-dir=$SCORE_CARD_DIR" >> "$GITHUB_OUTPUT"

          SURVEY_DIR="$TEST_DIR/survey_dir"
          mkdir -p "$SURVEY_DIR"
          chmod -R 777 "$SURVEY_DIR"
          echo "survey-dir=$SURVEY_DIR"
          echo "survey-dir=$SURVEY_DIR" >> "$GITHUB_OUTPUT"

          ANALYSIS_OUTPUT_DIR="$TEST_DIR/analysis_output_dir"
          mkdir -p "$ANALYSIS_OUTPUT_DIR"
          chmod -R 777 "$ANALYSIS_OUTPUT_DIR"
          echo "analysis-output-dir=$ANALYSIS_OUTPUT_DIR"
          echo "analysis-output-dir=$ANALYSIS_OUTPUT_DIR" >> "$GITHUB_OUTPUT"

      # https://github.com/Azure/login?tab=readme-ov-file#login-with-openid-connect-oidc-recommended
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # https://github.com/marketplace/actions/azure-cli-action#workflow-to-execute-an-azure-cli-script-of-a-specific-cli-version
      - name: Download pacta-data
        uses: azure/CLI@v2
        env:
          PACTA_DATA_URL: ${{ steps.prepare.outputs.pacta-data-url }}
        with:
          # azcliversion: 2.30.0
          inlineScript: |
            az storage copy \
              --source "$PACTA_DATA_URL/*" \
              --destination "pacta-data" \
              --recursive \
              --exclude-pattern "*.sqlite"

      # https://github.com/marketplace/actions/azure-cli-action#workflow-to-execute-an-azure-cli-script-of-a-specific-cli-version
      - name: Download Benchmark Results
        uses: azure/CLI@v2
        env:
          BENCHMARKS_URL: ${{ steps.prepare.outputs.benchmarks-url }}
        with:
          # azcliversion: 2.30.0
          inlineScript: |
            az storage copy \
              --source "$BENCHMARKS_URL/*" \
              --destination "benchmarks_dir/" \
              --recursive \
              --exclude-pattern "*.sqlite"

      - name: Show TEST_DIR
        id: ls-test-dir
        env:
          TEST_DIR: ${{ steps.prepare.outputs.test-dir }}
        run: |
          ls -laR "$TEST_DIR"

      - name: Run Docker Image (audit-only)
        env:
          FULL_IMAGE_NAME: ${{ inputs.full-image-name }}
          WORKSPACE: ${{ github.workspace }}
          PARAMETERS: ${{ steps.prepare.outputs.parameters }}
          ANALYSIS_OUTPUT_DIR: ${{ steps.prepare.outputs.analysis-output-dir }}
          BENCHMARKS_DIR: benchmarks_dir
          PACTA_DATA_DIR: pacta-data
          PORTFOLIO_DIR: tests/portfolios
          REAL_ESTATE_DIR: ${{ steps.prepare.outputs.real-estate-dir }}
          REPORT_OUTPUT_DIR: ${{ steps.prepare.outputs.report-output-dir }}
          SCORE_CARD_DIR: ${{ steps.prepare.outputs.score-card-dir }}
          SUMMARY_OUTPUT_DIR: ${{ steps.prepare.outputs.summary-output-dir }}
          SURVEY_DIR: ${{ steps.prepare.outputs.survey-dir }}
        run: |

          docker run \
          --network none \
          --env LOG_LEVEL=TRACE \
          --env ANALYSIS_OUTPUT_DIR="/mnt/analysis_output_dir" \
          --env OUTPUT_DIR="/mnt/analysis_output_dir" \
          --env BENCHMARKS_DIR="/mnt/benchmarks_dir" \
          --env PACTA_DATA_DIR="/mnt/pacta-data" \
          --env PORTFOLIO_DIR="/mnt/portfolios" \
          --env REAL_ESTATE_DIR="/mnt/real_estate_dir" \
          --env REPORT_OUTPUT_DIR="/mnt/report_output_dir" \
          --env SCORE_CARD_DIR="/mnt/score_card_dir" \
          --env SUMMARY_OUTPUT_DIR="/mnt/summary_output_dir" \
          --env SURVEY_DIR="/mnt/survey_dir" \
          --mount type=bind,readonly,source=${WORKSPACE}/${BENCHMARKS_DIR},target=/mnt/benchmarks_dir \
          --mount type=bind,readonly,source=${WORKSPACE}/${PACTA_DATA_DIR},target=/mnt/pacta-data \
          --mount type=bind,readonly,source=${WORKSPACE}/${PORTFOLIO_DIR},target=/mnt/portfolios \
          --mount type=bind,readonly,source=${REAL_ESTATE_DIR},target=/mnt/real_estate_dir \
          --mount type=bind,readonly,source=${SCORE_CARD_DIR},target=/mnt/score_card_dir \
          --mount type=bind,readonly,source=${SURVEY_DIR},target=/mnt/survey_dir \
          --mount type=bind,source=${ANALYSIS_OUTPUT_DIR},target=/mnt/analysis_output_dir \
          --mount type=bind,source=${REPORT_OUTPUT_DIR},target=/mnt/report_output_dir \
          --mount type=bind,source=${SUMMARY_OUTPUT_DIR},target=/mnt/summary_output_dir \
          --entrypoint "Rscript --vanilla /workflow.pacta.webapp/inst/extdata/scripts/run_audit.R" \
          $FULL_IMAGE_NAME \
          "$PARAMETERS"

      - name: List outputs (audit)
        env:
          ANALYSIS_OUTPUT_DIR: ${{ steps.prepare.outputs.analysis-output-dir }}
          REPORT_OUTPUT_DIR: ${{ steps.prepare.outputs.report-output-dir }}
          SUMMARY_OUTPUT_DIR: ${{ steps.prepare.outputs.summary-output-dir }}
        run: |
          ls -lR $ANALYSIS_OUTPUT_DIR
          ls -lR $REPORT_OUTPUT_DIR
          ls -lR $SUMMARY_OUTPUT_DIR


      - name: Run Docker Image
        env:
          FULL_IMAGE_NAME: ${{ inputs.full-image-name }}
          WORKSPACE: ${{ github.workspace }}
          PARAMETERS: ${{ steps.prepare.outputs.parameters }}
          ANALYSIS_OUTPUT_DIR: ${{ steps.prepare.outputs.analysis-output-dir }}
          BENCHMARKS_DIR: benchmarks_dir
          PACTA_DATA_DIR: pacta-data
          PORTFOLIO_DIR: tests/portfolios
          REAL_ESTATE_DIR: ${{ steps.prepare.outputs.real-estate-dir }}
          REPORT_OUTPUT_DIR: ${{ steps.prepare.outputs.report-output-dir }}
          SCORE_CARD_DIR: ${{ steps.prepare.outputs.score-card-dir }}
          SUMMARY_OUTPUT_DIR: ${{ steps.prepare.outputs.summary-output-dir }}
          SURVEY_DIR: ${{ steps.prepare.outputs.survey-dir }}
        run: |

          docker run \
          --network none \
          --env LOG_LEVEL=TRACE \
          --env ANALYSIS_OUTPUT_DIR="/mnt/analysis_output_dir" \
          --env OUTPUT_DIR="/mnt/analysis_output_dir" \
          --env BENCHMARKS_DIR="/mnt/benchmarks_dir" \
          --env PACTA_DATA_DIR="/mnt/pacta-data" \
          --env PORTFOLIO_DIR="/mnt/portfolios" \
          --env REAL_ESTATE_DIR="/mnt/real_estate_dir" \
          --env REPORT_OUTPUT_DIR="/mnt/report_output_dir" \
          --env SCORE_CARD_DIR="/mnt/score_card_dir" \
          --env SUMMARY_OUTPUT_DIR="/mnt/summary_output_dir" \
          --env SURVEY_DIR="/mnt/survey_dir" \
          --mount type=bind,readonly,source=${WORKSPACE}/${BENCHMARKS_DIR},target=/mnt/benchmarks_dir \
          --mount type=bind,readonly,source=${WORKSPACE}/${PACTA_DATA_DIR},target=/mnt/pacta-data \
          --mount type=bind,readonly,source=${WORKSPACE}/${PORTFOLIO_DIR},target=/mnt/portfolios \
          --mount type=bind,readonly,source=${REAL_ESTATE_DIR},target=/mnt/real_estate_dir \
          --mount type=bind,readonly,source=${SCORE_CARD_DIR},target=/mnt/score_card_dir \
          --mount type=bind,readonly,source=${SURVEY_DIR},target=/mnt/survey_dir \
          --mount type=bind,source=${ANALYSIS_OUTPUT_DIR},target=/mnt/analysis_output_dir \
          --mount type=bind,source=${REPORT_OUTPUT_DIR},target=/mnt/report_output_dir \
          --mount type=bind,source=${SUMMARY_OUTPUT_DIR},target=/mnt/summary_output_dir \
          $FULL_IMAGE_NAME \
          "$PARAMETERS"

      - name: List outputs
        env:
          REPORT_OUTPUT_DIR: ${{ steps.prepare.outputs.report-output-dir }}
          SUMMARY_OUTPUT_DIR: ${{ steps.prepare.outputs.summary-output-dir }}
        run: |
          ls -lR $REPORT_OUTPUT_DIR
          ls -lR $SUMMARY_OUTPUT_DIR

      - name: Upload results to Blob store
        id: upload-results
        uses: RMI-PACTA/actions/actions/azure/blob-copy@main
        with:
          source: ${{ steps.prepare.outputs.test-dir }}
          destination: ${{ inputs.results-url }}
          overwrite: false

      - name: Upload report to Blob store
        id: upload-report
        uses: RMI-PACTA/actions/actions/azure/blob-copy@main
        with:
          source: ${{ steps.prepare.outputs.report-output-dir }}
          destination: ${{ inputs.reports-url }}
          overwrite: false

      - name: Upload summary to Blob store
        id: upload-summary
        uses: RMI-PACTA/actions/actions/azure/blob-copy@main
        with:
          source: ${{ steps.prepare.outputs.summary-output-dir }}
          destination: ${{ inputs.reports-url }}
          overwrite: false

      - name: Export Outputs
        id: export-outputs
        env:
          REPORT_UPLOADED_FILES: ${{ steps.upload-report.outputs.destination-files }}
          SUMMARY_UPLOADED_FILES: ${{ steps.upload-summary.outputs.destination-files }}
        run: |

          REPORT_URL="$(
            echo "$REPORT_UPLOADED_FILES" | jq -rc '. [] | match(".*index.html$") | .string'
          )"
          echo "report-url=$REPORT_URL"
          echo "report-url=$REPORT_URL" >> "$GITHUB_OUTPUT"

          SUMMARY_URL="$(
            echo "$REPORT_UPLOADED_FILES" | jq -rc '. [] | match(".*template.pdf$") | .string'
          )"
          echo "summary-url=$SUMMARY_URL"
          echo "summary-url=$SUMMARY_URL" >> "$GITHUB_OUTPUT"

      - name: Prepare comment artifact
        id: prepare-artifact
        env:
          commit_time: ${{ github.event.pull_request.updated_at }}
          config_name: ${{ inputs.config-name }}
          full_image_name: ${{ inputs.full-image-name }}
          git_sha: ${{ github.event.pull_request.head.sha }}
          report_url: ${{ steps.export-outputs.outputs.report-url }}
          summary_url: ${{ steps.export-outputs.outputs.summary-url }}
        run: |
          mkdir -p /tmp/comment-json
          json_filename="$( \
            echo "report-comment-json-merge-$full_image_name-$config_name" | \
            tr '/:._' '-' \
            ).json"
          echo "json-filename=$json_filename" >> "$GITHUB_OUTPUT"
          json_file="/tmp/comment-json/$json_filename"
          jq \
            -n \
            --arg commit_time "$commit_time" \
            --arg config_name "$config_name" \
            --arg git_sha "$git_sha" \
            --arg report_url "$report_url" \
            --arg summary_url "$summary_url" \
            --arg full_image_name "$full_image_name" \
            '{
              "commit_time": $commit_time,
              "git_sha": $git_sha,
              "config": $config_name,
              "report": ("[Report](" + $report_url + ")"),
              "summary": (if (("" + $summary_url) == "") then null else "[Summary](" + $summary_url + ")" end),
              "image": ("`" + $full_image_name + "`")
            }' \
          >> $json_file
          cat "$json_file"

      - name: Upload comment JSON
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare-artifact.outputs.json-filename }}
          path: /tmp/comment-json/*
          if-no-files-found: error
          retention-days: 1
